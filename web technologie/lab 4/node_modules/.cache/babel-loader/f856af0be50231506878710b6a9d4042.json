{"ast":null,"code":"var _jsxFileName = \"/home/jacques/Documents/ece/inge4/techno web/lab/lab 4/lab/src/Composents/Channel/Channel.js\";\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { useState } from 'react';\nimport MessageForm from \"../MessageForm/MessageForm\";\nimport Messages from '../Messages/Messages';\nconst styles = {\n  channel: {\n    height: '100%',\n    flex: '1 1 auto',\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden'\n  }\n};\nexport default (({\n  channel\n}) => {\n  const [messages, setMessages] = useState([{\n    author: 'sergei',\n    creation: 1602831101929,\n    content: `\n## 1 - Architecture - Level easy\n\nIt is now the right time to re-organize/refactor our code. Split this\nmonolithic react Component into multiple section. In the end, we should end\nup with the following components: 'Header', 'Footer', 'Main', 'Channels',\n'Channel', 'Messages', 'MessageSend':\n\n- 'App.js' file uses 'Header.js', 'Main.js', 'Footer.js'\n- 'Main.js' file uses 'Channels.js', 'Channel.js'\n- 'Channels.js' prints the list of channels\n- 'Channel.js' prints the messages, uses 'Messages.js' and 'MessageSend.js'\n- 'Messages.js' prints the list of messages inside the current channel\n- 'MessageForm.js' send a new message\n\n\\`\\`\\`\n+--------------------------------------------+\n|                  Header                    |\n+--------------------------------------------+\n|   Channels    |          Channel           |\n|               | +------------------------+ |\n|               | |        Messages        | |\n|               | +------------------------+ |\n|               | |      MessageSend       | |\n|               | +------------------------+ |\n+--------------------------------------------+\n|                  Footer                    |\n+--------------------------------------------+\n\\`\\`\\`\n    `\n  }, {\n    author: 'david',\n    creation: 1602832138892,\n    content: `\n## 2 - Styles - Level easy\n\nGive it some styles, use CSS to make it looks good. Possible source of\nimprovements include changing the colors, replacing the HTML \"send\" button\nwith an icon, working on the header, providing day/night themes ... be creative\n    `\n  }, {\n    author: 'sergei',\n    creation: 1602840139202,\n    content: `\n## 3 - Use an external library - Level medium\n\nFormat the date in a human readable format. While the date is generated on\nthe server side to ensure its relevance and prevent from forgery, it must be\ndisplayed according to the user browser local. The\n[Moment.js](https://momentjs.com/) library has been the library of choice\nfor many years to accomplish date formatting. Read what is displayed on the\ntop right corner of their homepage, it is now depreciated. Read the reasons\nand act accordingly.\n    `\n  }, {\n    author: 'david',\n    creation: 1602844139200,\n    content: `\n## 4 - Support message contents in Markdown - Level hard\n\nMarkdown is the most popular syntax to format text into HTML. It is used\nby the majority of the project Readme files, to write documentation and to\ngenerate websites.\n\nI recommand you to use the [unified](https://unifiedjs.com/) which is very\npowerful and comes with a lot of plugins. You can read the Markdown to HTML\nguide in the learn section and enrich it with your selection of relevant\nplugins.\n\nConsider adding syntax highlight support with a library like\n[Prism](https://prismjs.com/).\n    `\n  }]);\n\n  const addMessage = message => {\n    setMessages([...messages, message]);\n  };\n\n  return jsx(\"div\", {\n    css: styles.channel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Messages for \", channel.name), jsx(Messages, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), jsx(MessageForm, {\n    addMessage: addMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["/home/jacques/Documents/ece/inge4/techno web/lab/lab 4/lab/src/Composents/Channel/Channel.js"],"names":["jsx","useState","MessageForm","Messages","styles","channel","height","flex","display","flexDirection","overflow","messages","setMessages","author","creation","content","addMessage","message","name"],"mappings":";;AAAA;AACA,SAASA,GAAT,QAAoB,eAApB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAE,MADD;AAEPC,IAAAA,IAAI,EAAE,UAFC;AAGPC,IAAAA,OAAO,EAAE,MAHF;AAIPC,IAAAA,aAAa,EAAE,QAJR;AAKPC,IAAAA,QAAQ,EAAE;AALH;AADI,CAAf;AAUA,gBAAe,CAAC;AACdL,EAAAA;AADc,CAAD,KAET;AACJ,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAC;AACxCY,IAAAA,MAAM,EAAE,QADgC;AAExCC,IAAAA,QAAQ,EAAE,aAF8B;AAGxCC,IAAAA,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhC4C,GAAD,EAiCvC;AACAF,IAAAA,MAAM,EAAE,OADR;AAEAC,IAAAA,QAAQ,EAAE,aAFV;AAGAC,IAAAA,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AATI,GAjCuC,EA2CvC;AACAF,IAAAA,MAAM,EAAE,QADR;AAEAC,IAAAA,QAAQ,EAAE,aAFV;AAGAC,IAAAA,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbI,GA3CuC,EAyDvC;AACAF,IAAAA,MAAM,EAAE,OADR;AAEAC,IAAAA,QAAQ,EAAE,aAFV;AAGAC,IAAAA,OAAO,EAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBI,GAzDuC,CAAD,CAAxC;;AA6EA,QAAMC,UAAU,GAAIC,OAAD,IAAa;AAC9BL,IAAAA,WAAW,CAAC,CACV,GAAGD,QADO,EAEVM,OAFU,CAAD,CAAX;AAID,GALD;;AAOA,SACE;AAAK,IAAA,GAAG,EAAEb,MAAM,CAACC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAkBA,OAAO,CAACa,IAA1B,CADF,EAEE,IAAC,QAAD;AAAU,IAAA,QAAQ,EAAEP,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,IAAC,WAAD;AAAa,IAAA,UAAU,EAAEK,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CA9FD","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport {useState} from 'react';\nimport MessageForm from \"../MessageForm/MessageForm\"\nimport Messages from '../Messages/Messages';\n\nconst styles = {\n  channel: {\n    height: '100%',\n    flex: '1 1 auto',\n    display: 'flex',\n    flexDirection: 'column',\n    overflow: 'hidden',\n  }\n}\n\nexport default ({\n  channel\n}) => {\n  const [messages, setMessages] = useState([{\n    author: 'sergei',\n    creation: 1602831101929,\n    content: `\n## 1 - Architecture - Level easy\n\nIt is now the right time to re-organize/refactor our code. Split this\nmonolithic react Component into multiple section. In the end, we should end\nup with the following components: 'Header', 'Footer', 'Main', 'Channels',\n'Channel', 'Messages', 'MessageSend':\n\n- 'App.js' file uses 'Header.js', 'Main.js', 'Footer.js'\n- 'Main.js' file uses 'Channels.js', 'Channel.js'\n- 'Channels.js' prints the list of channels\n- 'Channel.js' prints the messages, uses 'Messages.js' and 'MessageSend.js'\n- 'Messages.js' prints the list of messages inside the current channel\n- 'MessageForm.js' send a new message\n\n\\`\\`\\`\n+--------------------------------------------+\n|                  Header                    |\n+--------------------------------------------+\n|   Channels    |          Channel           |\n|               | +------------------------+ |\n|               | |        Messages        | |\n|               | +------------------------+ |\n|               | |      MessageSend       | |\n|               | +------------------------+ |\n+--------------------------------------------+\n|                  Footer                    |\n+--------------------------------------------+\n\\`\\`\\`\n    `,\n  },{\n    author: 'david',\n    creation: 1602832138892,\n    content: `\n## 2 - Styles - Level easy\n\nGive it some styles, use CSS to make it looks good. Possible source of\nimprovements include changing the colors, replacing the HTML \"send\" button\nwith an icon, working on the header, providing day/night themes ... be creative\n    `,\n  },{\n    author: 'sergei',\n    creation: 1602840139202,\n    content: `\n## 3 - Use an external library - Level medium\n\nFormat the date in a human readable format. While the date is generated on\nthe server side to ensure its relevance and prevent from forgery, it must be\ndisplayed according to the user browser local. The\n[Moment.js](https://momentjs.com/) library has been the library of choice\nfor many years to accomplish date formatting. Read what is displayed on the\ntop right corner of their homepage, it is now depreciated. Read the reasons\nand act accordingly.\n    `,\n  },{\n    author: 'david',\n    creation: 1602844139200,\n    content: `\n## 4 - Support message contents in Markdown - Level hard\n\nMarkdown is the most popular syntax to format text into HTML. It is used\nby the majority of the project Readme files, to write documentation and to\ngenerate websites.\n\nI recommand you to use the [unified](https://unifiedjs.com/) which is very\npowerful and comes with a lot of plugins. You can read the Markdown to HTML\nguide in the learn section and enrich it with your selection of relevant\nplugins.\n\nConsider adding syntax highlight support with a library like\n[Prism](https://prismjs.com/).\n    `,\n  }])\n\n  const addMessage = (message) => {\n    setMessages([\n      ...messages,\n      message\n    ])\n  }\n\n  return (\n    <div css={styles.channel}>\n      <h1>Messages for {channel.name}</h1>\n      <Messages messages={messages}/>\n      <MessageForm addMessage={addMessage} />\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}